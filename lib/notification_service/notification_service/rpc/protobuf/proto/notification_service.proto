/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option java_generic_services = true;
option java_package = "org.aiflow.notification.proto";
option go_package = "/notification_service";
option py_generic_services = true;

import "google/api/annotations.proto";

package notification_service;

service NotificationService {
    // AirFlowService provides notification function rest endpoint of NotificationService for Notification Service component.
    // Functions of NotificationService include:
    //  1.Send event.
    //  2.List events.

    // Send event.
    rpc sendEvent (SendEventRequest) returns (SendEventsResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/send_event"
            body: "*"
        };
    }

    // List events.
    rpc listEvents (ListEventsRequest) returns (ListEventsResponse) {
        option (google.api.http) = {
            get: "/aiflow/notification-service/list_events"
        };
    }

    // Count events.
    rpc countEvents (CountEventsRequest) returns (CountEventsResponse) {
        option (google.api.http) = {
            get: "/aiflow/notification-service/count_events"
        };
    }

    // List all events
    rpc listAllEvents (ListAllEventsRequest) returns (ListEventsResponse) {
        option (google.api.http) = {
            get: "/aiflow/notification-service/list_all_events"
        };
    }

    // Accepts notifications from other members.
    rpc notify (NotifyRequest) returns (CommonResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/notify"
            body: "*"
        };
    }

    // List current living members.
    rpc listMembers (ListMembersRequest) returns (ListMembersResponse) {
        option (google.api.http) = {
            get: "/aiflow/notification-service/list_members"
        };
    }

    // Notify current members that there is a new member added.
    rpc notifyNewMember (NotifyNewMemberRequest) returns (CommonResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/notify_new_member"
            body: "*"
        };
    }

    // Register notification client in the db of notification service
    rpc registerClient (RegisterClientRequest) returns (RegisterClientResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/register_client"
            body: "*"
        };
    }

    // Delete notification client
    rpc deleteClient (ClientIdRequest) returns (CommonResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/delete_client"
            body: "*"
        };
    }

    // Check if a notification client has been registered in the db
    rpc isClientExists (ClientIdRequest) returns (isClientExistsResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/is_client_exists"
            body: "*"
        };
    }

    // Get the event offset by timestamp
    rpc timestampToEventOffset(TimeToOffsetRequest) returns (TimeToOffsetResponse) {
        option (google.api.http) = {
            post: "/aiflow/notification-service/timestamp_to_event_offset"
            body: "*"
        };
    }
}
message EventProto {
    string key = 1;
    string value = 2;
    string context = 3;
    string namespace = 4;
    int64 offset = 5;
    int64 create_time = 6;
    string sender = 7;
}

message SenderEventCountProto {
    string sender = 1;
    int64 event_count = 2;
}

message SendEventRequest {
    EventProto event = 1;
    // use uuid to identify retry
    string uuid = 2;
    bool enable_idempotence = 3;
}

message ClientMeta {
    string namespace = 1;
    string sender = 2;
}

enum ReturnStatus {
    SUCCESS = 0;
    ERROR = 1;
}

message SendEventsResponse {
    EventProto event = 1;
    ReturnStatus return_code = 2;
    string return_msg = 3;
}

message ListEventsRequest {
    string key = 1;
    string namespace = 2;
    string sender = 3;
    int64 start_offset = 4;
    int64 end_offset = 5;
    int32 timeout_seconds = 6;
}

message CountEventsRequest {
    string key = 1;
    string namespace = 2;
    string sender = 3;
    int64 start_offset = 4;
    int64 end_offset = 5;
}

message ListAllEventsRequest {
    int32 timeout_seconds = 1;
    int64 start_time = 2;
    int64 start_offset = 3;
    int64 end_offset = 4;
}

message ListEventsResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
    repeated EventProto events = 3;
}

message CountEventsResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
    int64  event_count = 3;
    repeated SenderEventCountProto sender_event_counts = 4;
}

message MemberProto {
    int64 version = 1;
    string server_uri = 2;
    int64 update_time = 3;
}

message Notify {
    string key = 1;
    string namespace = 2;
}

message NotifyRequest {
    repeated Notify notifies = 1;
}

message ListMembersRequest {
    int32 timeout_seconds = 1;
}

message ListMembersResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
    repeated MemberProto members = 3;
}

message NotifyNewMemberRequest {
    MemberProto member = 1;
}

message RegisterClientRequest {
    ClientMeta client_meta = 1;
}

message RegisterClientResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
    int64 client_id = 3;
}

message ClientIdRequest {
    int64 client_id = 1;
}

message CommonResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
}

message isClientExistsResponse {
    ReturnStatus return_code = 1;
    string return_msg = 2;
    bool is_exists = 3;
}

message TimeToOffsetRequest {
    int64 timestamp = 1;
}

message TimeToOffsetResponse {
    ReturnStatus return_code = 1;
    int64 offset = 2;
}
