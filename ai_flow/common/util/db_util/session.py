# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
import contextlib
import logging

import sqlalchemy
import sqlalchemy.orm

from ai_flow.common.configuration import config_constants
from ai_flow.common.exception.exceptions import AIFlowDBException

logger = logging.getLogger(__name__)


def _get_managed_session_maker(SessionMaker):
    """
    Creates session factory for generating exception-safe SQLAlchemy sessions that are available for
    using session context manager. Session generated by session factory is automatically committed
    if no exceptions are encountered within its associated context. If an exception is
    encountered, this session could be rolled back. Session generated by session factory is
    automatically closed when the session's associated context is exited.
    """

    @contextlib.contextmanager
    def make_managed_session():
        """Provide transactional scope around series of session operations."""
        session = SessionMaker()
        try:
            yield session
            session.commit()
        except AIFlowDBException:
            session.rollback()
            raise
        except Exception as e:
            session.rollback()
            raise AIFlowDBException(error_msg=e)
        finally:
            session.close()

    return make_managed_session


def create_sqlalchemy_engine(db_uri):
    """
    Create SQLAlchemy engine with specified database URI to support AIFlow entities backend storage.
    """
    enable_pool = config_constants.SQLALCHEMY_POOL_ENABLED
    pool_size = config_constants.SQLALCHEMY_POOL_SIZE
    pool_max_overflow = config_constants.SQLALCHEMY_MAX_OVERFLOW
    pool_kwargs = {}
    if enable_pool:
        pool_kwargs['pool_size'] = int(pool_size)
        pool_kwargs['max_overflow'] = int(pool_max_overflow)
        logger.info("Create SQLAlchemy engine with pool options %s", pool_kwargs)
    return sqlalchemy.create_engine(db_uri, pool_pre_ping=True, **pool_kwargs)


def create_session():
    db_uri = config_constants.SQLALCHEMY_DB_URI
    db_engine = create_sqlalchemy_engine(db_uri)
    SessionMaker = sqlalchemy.orm.sessionmaker(bind=db_engine)
    return _get_managed_session_maker(SessionMaker)
