//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: metadata_service.proto

package ai_flow

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NamespaceListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*NamespaceProto `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *NamespaceListProto) Reset() {
	*x = NamespaceListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceListProto) ProtoMessage() {}

func (x *NamespaceListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceListProto.ProtoReflect.Descriptor instead.
func (*NamespaceListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{0}
}

func (x *NamespaceListProto) GetNamespaces() []*NamespaceProto {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// workflow snapshot
type ListWorkflowSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId int64 `protobuf:"varint,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	PageSize   int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Offset     int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListWorkflowSnapshotsRequest) Reset() {
	*x = ListWorkflowSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkflowSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowSnapshotsRequest) ProtoMessage() {}

func (x *ListWorkflowSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListWorkflowSnapshotsRequest) GetWorkflowId() int64 {
	if x != nil {
		return x.WorkflowId
	}
	return 0
}

func (x *ListWorkflowSnapshotsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListWorkflowSnapshotsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type WorkflowSnapshotListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowSnapshots []*WorkflowSnapshotProto `protobuf:"bytes,1,rep,name=workflow_snapshots,json=workflowSnapshots,proto3" json:"workflow_snapshots,omitempty"`
}

func (x *WorkflowSnapshotListProto) Reset() {
	*x = WorkflowSnapshotListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowSnapshotListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowSnapshotListProto) ProtoMessage() {}

func (x *WorkflowSnapshotListProto) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowSnapshotListProto.ProtoReflect.Descriptor instead.
func (*WorkflowSnapshotListProto) Descriptor() ([]byte, []int) {
	return file_metadata_service_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowSnapshotListProto) GetWorkflowSnapshots() []*WorkflowSnapshotProto {
	if x != nil {
		return x.WorkflowSnapshots
	}
	return nil
}

var File_metadata_service_proto protoreflect.FileDescriptor

var file_metadata_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d,
	0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x74, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x6a, 0x0a, 0x19, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x4d, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x32,
	0xd3, 0x07, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x64, 0x64,
	0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x64, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x0e, 0x6c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x74, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12,
	0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x7e, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61,
	0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x2e,
	0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x29, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x69, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x08, 0x2f, 0x61, 0x69, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x90, 0x01, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metadata_service_proto_rawDescOnce sync.Once
	file_metadata_service_proto_rawDescData = file_metadata_service_proto_rawDesc
)

func file_metadata_service_proto_rawDescGZIP() []byte {
	file_metadata_service_proto_rawDescOnce.Do(func() {
		file_metadata_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_service_proto_rawDescData)
	})
	return file_metadata_service_proto_rawDescData
}

var file_metadata_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_metadata_service_proto_goTypes = []interface{}{
	(*NamespaceListProto)(nil),           // 0: ai_flow.NamespaceListProto
	(*ListWorkflowSnapshotsRequest)(nil), // 1: ai_flow.ListWorkflowSnapshotsRequest
	(*WorkflowSnapshotListProto)(nil),    // 2: ai_flow.WorkflowSnapshotListProto
	(*NamespaceProto)(nil),               // 3: ai_flow.NamespaceProto
	(*WorkflowSnapshotProto)(nil),        // 4: ai_flow.WorkflowSnapshotProto
	(*NameRequest)(nil),                  // 5: ai_flow.NameRequest
	(*ListRequest)(nil),                  // 6: ai_flow.ListRequest
	(*IdRequest)(nil),                    // 7: ai_flow.IdRequest
	(*Response)(nil),                     // 8: ai_flow.Response
}
var file_metadata_service_proto_depIdxs = []int32{
	3,  // 0: ai_flow.NamespaceListProto.namespaces:type_name -> ai_flow.NamespaceProto
	4,  // 1: ai_flow.WorkflowSnapshotListProto.workflow_snapshots:type_name -> ai_flow.WorkflowSnapshotProto
	3,  // 2: ai_flow.MetadataService.addNamespace:input_type -> ai_flow.NamespaceProto
	5,  // 3: ai_flow.MetadataService.getNamespace:input_type -> ai_flow.NameRequest
	3,  // 4: ai_flow.MetadataService.updateNamespace:input_type -> ai_flow.NamespaceProto
	6,  // 5: ai_flow.MetadataService.listNamespaces:input_type -> ai_flow.ListRequest
	5,  // 6: ai_flow.MetadataService.deleteNamespace:input_type -> ai_flow.NameRequest
	4,  // 7: ai_flow.MetadataService.addWorkflowSnapshot:input_type -> ai_flow.WorkflowSnapshotProto
	7,  // 8: ai_flow.MetadataService.getWorkflowSnapshot:input_type -> ai_flow.IdRequest
	1,  // 9: ai_flow.MetadataService.listWorkflowSnapshots:input_type -> ai_flow.ListWorkflowSnapshotsRequest
	7,  // 10: ai_flow.MetadataService.deleteWorkflowSnapshot:input_type -> ai_flow.IdRequest
	8,  // 11: ai_flow.MetadataService.addNamespace:output_type -> ai_flow.Response
	8,  // 12: ai_flow.MetadataService.getNamespace:output_type -> ai_flow.Response
	8,  // 13: ai_flow.MetadataService.updateNamespace:output_type -> ai_flow.Response
	8,  // 14: ai_flow.MetadataService.listNamespaces:output_type -> ai_flow.Response
	8,  // 15: ai_flow.MetadataService.deleteNamespace:output_type -> ai_flow.Response
	8,  // 16: ai_flow.MetadataService.addWorkflowSnapshot:output_type -> ai_flow.Response
	8,  // 17: ai_flow.MetadataService.getWorkflowSnapshot:output_type -> ai_flow.Response
	8,  // 18: ai_flow.MetadataService.listWorkflowSnapshots:output_type -> ai_flow.Response
	8,  // 19: ai_flow.MetadataService.deleteWorkflowSnapshot:output_type -> ai_flow.Response
	11, // [11:20] is the sub-list for method output_type
	2,  // [2:11] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_metadata_service_proto_init() }
func file_metadata_service_proto_init() {
	if File_metadata_service_proto != nil {
		return
	}
	file_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_metadata_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkflowSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowSnapshotListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metadata_service_proto_goTypes,
		DependencyIndexes: file_metadata_service_proto_depIdxs,
		MessageInfos:      file_metadata_service_proto_msgTypes,
	}.Build()
	File_metadata_service_proto = out.File
	file_metadata_service_proto_rawDesc = nil
	file_metadata_service_proto_goTypes = nil
	file_metadata_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetadataServiceClient interface {
	// begin namespace api
	AddNamespace(ctx context.Context, in *NamespaceProto, opts ...grpc.CallOption) (*Response, error)
	GetNamespace(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateNamespace(ctx context.Context, in *NamespaceProto, opts ...grpc.CallOption) (*Response, error)
	ListNamespaces(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteNamespace(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error)
	// begin workflow snapshot api
	AddWorkflowSnapshot(ctx context.Context, in *WorkflowSnapshotProto, opts ...grpc.CallOption) (*Response, error)
	GetWorkflowSnapshot(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
	ListWorkflowSnapshots(ctx context.Context, in *ListWorkflowSnapshotsRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteWorkflowSnapshot(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) AddNamespace(ctx context.Context, in *NamespaceProto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/addNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetNamespace(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) UpdateNamespace(ctx context.Context, in *NamespaceProto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/updateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListNamespaces(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteNamespace(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) AddWorkflowSnapshot(ctx context.Context, in *WorkflowSnapshotProto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/addWorkflowSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetWorkflowSnapshot(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/getWorkflowSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) ListWorkflowSnapshots(ctx context.Context, in *ListWorkflowSnapshotsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/listWorkflowSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) DeleteWorkflowSnapshot(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ai_flow.MetadataService/deleteWorkflowSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
type MetadataServiceServer interface {
	// begin namespace api
	AddNamespace(context.Context, *NamespaceProto) (*Response, error)
	GetNamespace(context.Context, *NameRequest) (*Response, error)
	UpdateNamespace(context.Context, *NamespaceProto) (*Response, error)
	ListNamespaces(context.Context, *ListRequest) (*Response, error)
	DeleteNamespace(context.Context, *NameRequest) (*Response, error)
	// begin workflow snapshot api
	AddWorkflowSnapshot(context.Context, *WorkflowSnapshotProto) (*Response, error)
	GetWorkflowSnapshot(context.Context, *IdRequest) (*Response, error)
	ListWorkflowSnapshots(context.Context, *ListWorkflowSnapshotsRequest) (*Response, error)
	DeleteWorkflowSnapshot(context.Context, *IdRequest) (*Response, error)
}

// UnimplementedMetadataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetadataServiceServer struct {
}

func (*UnimplementedMetadataServiceServer) AddNamespace(context.Context, *NamespaceProto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamespace not implemented")
}
func (*UnimplementedMetadataServiceServer) GetNamespace(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (*UnimplementedMetadataServiceServer) UpdateNamespace(context.Context, *NamespaceProto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (*UnimplementedMetadataServiceServer) ListNamespaces(context.Context, *ListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteNamespace(context.Context, *NameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedMetadataServiceServer) AddWorkflowSnapshot(context.Context, *WorkflowSnapshotProto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkflowSnapshot not implemented")
}
func (*UnimplementedMetadataServiceServer) GetWorkflowSnapshot(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowSnapshot not implemented")
}
func (*UnimplementedMetadataServiceServer) ListWorkflowSnapshots(context.Context, *ListWorkflowSnapshotsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowSnapshots not implemented")
}
func (*UnimplementedMetadataServiceServer) DeleteWorkflowSnapshot(context.Context, *IdRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowSnapshot not implemented")
}

func RegisterMetadataServiceServer(s *grpc.Server, srv MetadataServiceServer) {
	s.RegisterService(&_MetadataService_serviceDesc, srv)
}

func _MetadataService_AddNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).AddNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/AddNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).AddNamespace(ctx, req.(*NamespaceProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetNamespace(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).UpdateNamespace(ctx, req.(*NamespaceProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListNamespaces(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteNamespace(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_AddWorkflowSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowSnapshotProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).AddWorkflowSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/AddWorkflowSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).AddWorkflowSnapshot(ctx, req.(*WorkflowSnapshotProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetWorkflowSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetWorkflowSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/GetWorkflowSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetWorkflowSnapshot(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_ListWorkflowSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).ListWorkflowSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/ListWorkflowSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).ListWorkflowSnapshots(ctx, req.(*ListWorkflowSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_DeleteWorkflowSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).DeleteWorkflowSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai_flow.MetadataService/DeleteWorkflowSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).DeleteWorkflowSnapshot(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ai_flow.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addNamespace",
			Handler:    _MetadataService_AddNamespace_Handler,
		},
		{
			MethodName: "getNamespace",
			Handler:    _MetadataService_GetNamespace_Handler,
		},
		{
			MethodName: "updateNamespace",
			Handler:    _MetadataService_UpdateNamespace_Handler,
		},
		{
			MethodName: "listNamespaces",
			Handler:    _MetadataService_ListNamespaces_Handler,
		},
		{
			MethodName: "deleteNamespace",
			Handler:    _MetadataService_DeleteNamespace_Handler,
		},
		{
			MethodName: "addWorkflowSnapshot",
			Handler:    _MetadataService_AddWorkflowSnapshot_Handler,
		},
		{
			MethodName: "getWorkflowSnapshot",
			Handler:    _MetadataService_GetWorkflowSnapshot_Handler,
		},
		{
			MethodName: "listWorkflowSnapshots",
			Handler:    _MetadataService_ListWorkflowSnapshots_Handler,
		},
		{
			MethodName: "deleteWorkflowSnapshot",
			Handler:    _MetadataService_DeleteWorkflowSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata_service.proto",
}
