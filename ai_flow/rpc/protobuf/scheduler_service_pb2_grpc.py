#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import message_pb2 as message__pb2
from . import scheduler_service_pb2 as scheduler__service__pb2


class SchedulerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addWorkflow = channel.unary_unary(
                '/ai_flow.SchedulerService/addWorkflow',
                request_serializer=message__pb2.WorkflowProto.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.updateWorkflow = channel.unary_unary(
                '/ai_flow.SchedulerService/updateWorkflow',
                request_serializer=scheduler__service__pb2.UpdateWorkflowRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getWorkflow = channel.unary_unary(
                '/ai_flow.SchedulerService/getWorkflow',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteWorkflow = channel.unary_unary(
                '/ai_flow.SchedulerService/deleteWorkflow',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.disableWorkflow = channel.unary_unary(
                '/ai_flow.SchedulerService/disableWorkflow',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.enableWorkflow = channel.unary_unary(
                '/ai_flow.SchedulerService/enableWorkflow',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listWorkflows = channel.unary_unary(
                '/ai_flow.SchedulerService/listWorkflows',
                request_serializer=scheduler__service__pb2.ListWorkflowsRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.startWorkflowExecution = channel.unary_unary(
                '/ai_flow.SchedulerService/startWorkflowExecution',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.stopWorkflowExecution = channel.unary_unary(
                '/ai_flow.SchedulerService/stopWorkflowExecution',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.stopWorkflowExecutions = channel.unary_unary(
                '/ai_flow.SchedulerService/stopWorkflowExecutions',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getWorkflowExecution = channel.unary_unary(
                '/ai_flow.SchedulerService/getWorkflowExecution',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listWorkflowExecutions = channel.unary_unary(
                '/ai_flow.SchedulerService/listWorkflowExecutions',
                request_serializer=scheduler__service__pb2.ListWorkflowItemsRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.startTaskExecution = channel.unary_unary(
                '/ai_flow.SchedulerService/startTaskExecution',
                request_serializer=message__pb2.TaskExecutionIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.stopTaskExecution = channel.unary_unary(
                '/ai_flow.SchedulerService/stopTaskExecution',
                request_serializer=message__pb2.TaskExecutionIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getTaskExecution = channel.unary_unary(
                '/ai_flow.SchedulerService/getTaskExecution',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listTaskExecutions = channel.unary_unary(
                '/ai_flow.SchedulerService/listTaskExecutions',
                request_serializer=scheduler__service__pb2.ListTaskExecutionsRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.addWorkflowSchedule = channel.unary_unary(
                '/ai_flow.SchedulerService/addWorkflowSchedule',
                request_serializer=message__pb2.WorkflowScheduleProto.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getWorkflowSchedule = channel.unary_unary(
                '/ai_flow.SchedulerService/getWorkflowSchedule',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listWorkflowSchedules = channel.unary_unary(
                '/ai_flow.SchedulerService/listWorkflowSchedules',
                request_serializer=scheduler__service__pb2.ListWorkflowItemsRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteWorkflowSchedule = channel.unary_unary(
                '/ai_flow.SchedulerService/deleteWorkflowSchedule',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteWorkflowSchedules = channel.unary_unary(
                '/ai_flow.SchedulerService/deleteWorkflowSchedules',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.pauseWorkflowSchedule = channel.unary_unary(
                '/ai_flow.SchedulerService/pauseWorkflowSchedule',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.resumeWorkflowSchedule = channel.unary_unary(
                '/ai_flow.SchedulerService/resumeWorkflowSchedule',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.addWorkflowTrigger = channel.unary_unary(
                '/ai_flow.SchedulerService/addWorkflowTrigger',
                request_serializer=message__pb2.WorkflowTriggerProto.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getWorkflowTrigger = channel.unary_unary(
                '/ai_flow.SchedulerService/getWorkflowTrigger',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listWorkflowTriggers = channel.unary_unary(
                '/ai_flow.SchedulerService/listWorkflowTriggers',
                request_serializer=scheduler__service__pb2.ListWorkflowItemsRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteWorkflowTrigger = channel.unary_unary(
                '/ai_flow.SchedulerService/deleteWorkflowTrigger',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteWorkflowTriggers = channel.unary_unary(
                '/ai_flow.SchedulerService/deleteWorkflowTriggers',
                request_serializer=message__pb2.WorkflowIdentifier.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.pauseWorkflowTrigger = channel.unary_unary(
                '/ai_flow.SchedulerService/pauseWorkflowTrigger',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.resumeWorkflowTrigger = channel.unary_unary(
                '/ai_flow.SchedulerService/resumeWorkflowTrigger',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )


class SchedulerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addWorkflow(self, request, context):
        """begin workflow api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disableWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enableWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listWorkflows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startWorkflowExecution(self, request, context):
        """begin workflow execution api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopWorkflowExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWorkflowExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listWorkflowExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startTaskExecution(self, request, context):
        """begin task execution api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopTaskExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTaskExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listTaskExecutions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addWorkflowSchedule(self, request, context):
        """begin workflow schedule api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWorkflowSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listWorkflowSchedules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflowSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflowSchedules(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseWorkflowSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resumeWorkflowSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addWorkflowTrigger(self, request, context):
        """begin workflow trigger api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWorkflowTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listWorkflowTriggers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflowTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflowTriggers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseWorkflowTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resumeWorkflowTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.addWorkflow,
                    request_deserializer=message__pb2.WorkflowProto.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'updateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.updateWorkflow,
                    request_deserializer=scheduler__service__pb2.UpdateWorkflowRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.getWorkflow,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflow,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'disableWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.disableWorkflow,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'enableWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.enableWorkflow,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listWorkflows': grpc.unary_unary_rpc_method_handler(
                    servicer.listWorkflows,
                    request_deserializer=scheduler__service__pb2.ListWorkflowsRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'startWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startWorkflowExecution,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'stopWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.stopWorkflowExecution,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'stopWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.stopWorkflowExecutions,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getWorkflowExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.getWorkflowExecution,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listWorkflowExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.listWorkflowExecutions,
                    request_deserializer=scheduler__service__pb2.ListWorkflowItemsRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'startTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.startTaskExecution,
                    request_deserializer=message__pb2.TaskExecutionIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'stopTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.stopTaskExecution,
                    request_deserializer=message__pb2.TaskExecutionIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getTaskExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.getTaskExecution,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listTaskExecutions': grpc.unary_unary_rpc_method_handler(
                    servicer.listTaskExecutions,
                    request_deserializer=scheduler__service__pb2.ListTaskExecutionsRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'addWorkflowSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.addWorkflowSchedule,
                    request_deserializer=message__pb2.WorkflowScheduleProto.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getWorkflowSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.getWorkflowSchedule,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listWorkflowSchedules': grpc.unary_unary_rpc_method_handler(
                    servicer.listWorkflowSchedules,
                    request_deserializer=scheduler__service__pb2.ListWorkflowItemsRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteWorkflowSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflowSchedule,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteWorkflowSchedules': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflowSchedules,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'pauseWorkflowSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseWorkflowSchedule,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'resumeWorkflowSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.resumeWorkflowSchedule,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'addWorkflowTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.addWorkflowTrigger,
                    request_deserializer=message__pb2.WorkflowTriggerProto.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getWorkflowTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.getWorkflowTrigger,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listWorkflowTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.listWorkflowTriggers,
                    request_deserializer=scheduler__service__pb2.ListWorkflowItemsRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteWorkflowTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflowTrigger,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteWorkflowTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflowTriggers,
                    request_deserializer=message__pb2.WorkflowIdentifier.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'pauseWorkflowTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseWorkflowTrigger,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'resumeWorkflowTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.resumeWorkflowTrigger,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.SchedulerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SchedulerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/addWorkflow',
            message__pb2.WorkflowProto.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/updateWorkflow',
            scheduler__service__pb2.UpdateWorkflowRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/getWorkflow',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/deleteWorkflow',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disableWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/disableWorkflow',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enableWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/enableWorkflow',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/listWorkflows',
            scheduler__service__pb2.ListWorkflowsRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/startWorkflowExecution',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/stopWorkflowExecution',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/stopWorkflowExecutions',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWorkflowExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/getWorkflowExecution',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listWorkflowExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/listWorkflowExecutions',
            scheduler__service__pb2.ListWorkflowItemsRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/startTaskExecution',
            message__pb2.TaskExecutionIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/stopTaskExecution',
            message__pb2.TaskExecutionIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTaskExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/getTaskExecution',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listTaskExecutions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/listTaskExecutions',
            scheduler__service__pb2.ListTaskExecutionsRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addWorkflowSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/addWorkflowSchedule',
            message__pb2.WorkflowScheduleProto.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWorkflowSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/getWorkflowSchedule',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listWorkflowSchedules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/listWorkflowSchedules',
            scheduler__service__pb2.ListWorkflowItemsRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflowSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/deleteWorkflowSchedule',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflowSchedules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/deleteWorkflowSchedules',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pauseWorkflowSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/pauseWorkflowSchedule',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resumeWorkflowSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/resumeWorkflowSchedule',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addWorkflowTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/addWorkflowTrigger',
            message__pb2.WorkflowTriggerProto.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWorkflowTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/getWorkflowTrigger',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listWorkflowTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/listWorkflowTriggers',
            scheduler__service__pb2.ListWorkflowItemsRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflowTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/deleteWorkflowTrigger',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflowTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/deleteWorkflowTriggers',
            message__pb2.WorkflowIdentifier.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pauseWorkflowTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/pauseWorkflowTrigger',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resumeWorkflowTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.SchedulerService/resumeWorkflowTrigger',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
