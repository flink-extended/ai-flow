/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_generic_services = true;
option java_package = "org.aiflow.client.proto";
option py_generic_services = true;
option go_package = "/ai_flow";

import "message.proto";
import "google/api/annotations.proto";

package ai_flow;


message NamespaceListProto {
    repeated NamespaceProto namespaces = 1;
}

// workflow snapshot
message ListWorkflowSnapshotsRequest {
    int64 workflow_id = 1;
    int64 page_size = 2;
    int64 offset = 3;
}

message WorkflowSnapshotListProto {
    repeated WorkflowSnapshotProto workflow_snapshots = 1;
}


service MetadataService {

    // begin namespace api
    rpc addNamespace (NamespaceProto) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/namespace/add"
            body: "*"
        };
    };
    rpc getNamespace (NameRequest) returns (Response) {
        option (google.api.http) = {
            get: "/metadata/namespace/get/{name}"
        };
    };
    rpc updateNamespace (NamespaceProto) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/namespace/update"
            body: "*"
        };
    };
    rpc listNamespaces (ListRequest) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/namespace/list"
            body: "*"
        };
    };
    rpc deleteNamespace (NameRequest) returns (Response) {
        option (google.api.http) = {
            get: "/metadata/namespace/delete/{name}"
        };
    };
    // end namespace api

    // begin workflow snapshot api
    rpc addWorkflowSnapshot (WorkflowSnapshotProto) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow_snapshot/add"
            body: "*"
        };
    }
    rpc getWorkflowSnapshot (IdRequest) returns (Response) {
        option (google.api.http) = {
            get: "/metadata/workflow_snapshot/get/{id}"
        };
    }
    rpc listWorkflowSnapshots (ListWorkflowSnapshotsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow_snapshot/list"
            body: "*"
        };
    }
    rpc deleteWorkflowSnapshot (IdRequest) returns (Response) {
        option (google.api.http) = {
            get: "/metadata/workflow_snapshot/delete/{id}"
        };
    }
}
