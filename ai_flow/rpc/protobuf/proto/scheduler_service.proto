/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_generic_services = true;
option java_package = "org.aiflow.client.proto";
option py_generic_services = true;
option go_package = "/ai_flow";

import "message.proto";
import "google/api/annotations.proto";

package ai_flow;

message UpdateWorkflowRequest {
    WorkflowIdentifier identifier = 1;
    string content = 2;
    bytes pickled_workflow = 3;
    bool is_enabled = 4;
}

message WorkflowListProto {
    repeated WorkflowProto workflows = 1;
}

message ListWorkflowsRequest {
    string namespace = 1;
    int64 page_size = 2;
    int64 offset = 3;
}

service SchedulerService {

    rpc startWorkflowExecution (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/scheduler/workflow_execution/start"
            body: "*"
        };
    };

    // begin workflow api
    rpc addWorkflow (WorkflowProto) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/add"
            body: "*"
        };
    }
    rpc updateWorkflow (UpdateWorkflowRequest) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/update"
            body: "*"
        };
    }
    rpc getWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/get"
            body: "*"
        };
    }
    rpc deleteWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/delete"
            body: "*"
        };
    }
    rpc disableWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/disable"
            body: "*"
        };
    }
    rpc enableWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/enable"
            body: "*"
        };
    }
    rpc listWorkflows (ListWorkflowsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/metadata/workflow/list"
            body: "*"
        };
    }
    // end workflow api

}