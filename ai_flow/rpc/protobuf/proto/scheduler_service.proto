/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

option java_generic_services = true;
option java_package = "org.aiflow.client.proto";
option py_generic_services = true;
option go_package = "/ai_flow";

import "message.proto";
import "google/api/annotations.proto";

package ai_flow;

message UpdateWorkflowRequest {
    WorkflowIdentifier identifier = 1;
    string content = 2;
    bytes pickled_workflow = 3;
    bool is_enabled = 4;
}

message WorkflowListProto {
    repeated WorkflowProto workflows = 1;
}

message ListWorkflowsRequest {
    string namespace = 1;
    int64 page_size = 2;
    int64 offset = 3;
}

message ListWorkflowItemsRequest {
    string namespace = 1;
    string workflow_name = 2;
    int64 page_size = 3;
    int64 offset = 4;
}

message ListTaskExecutionsRequest {
    int64 workflow_execution_id = 1;
    int64 page_size = 2;
    int64 offset = 3;
}

message WorkflowExecutionListProto {
    repeated WorkflowExecutionProto workflow_executions = 1;
}

message TaskExecutionListProto {
    repeated TaskExecutionProto task_executions = 1;
}

message WorkflowScheduleListProto {
    repeated WorkflowScheduleProto workflow_schedules = 1;
}

message WorkflowTriggerListProto {
    repeated WorkflowTriggerProto workflow_triggers = 1;
}

service SchedulerService {

    // begin workflow api
    rpc addWorkflow (WorkflowProto) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/add"
            body: "*"
        };
    }
    rpc updateWorkflow (UpdateWorkflowRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/update"
            body: "*"
        };
    }
    rpc getWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/get"
            body: "*"
        };
    }
    rpc deleteWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/delete"
            body: "*"
        };
    }
    rpc disableWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/disable"
            body: "*"
        };
    }
    rpc enableWorkflow (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/enable"
            body: "*"
        };
    }
    rpc listWorkflows (ListWorkflowsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow/list"
            body: "*"
        };
    }
    // end workflow api

    // begin workflow execution api
    rpc startWorkflowExecution (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_execution/start"
            body: "*"
        };
    };
    rpc stopWorkflowExecution (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_execution/stop"
            body: "*"
        };
    };
    rpc stopWorkflowExecutions (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_execution/stop_all"
            body: "*"
        };
    };
    rpc getWorkflowExecution (IdRequest) returns (Response) {
        option (google.api.http) = {
            get: "/workflow_execution/get/{id}"
        };
    };
    rpc listWorkflowExecutions (ListWorkflowItemsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_execution/list"
            body: "*"
        };
    };
    // end workflow execution api

    // begin task execution api
    rpc startTaskExecution (TaskExecutionIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/task_execution/start"
            body: "*"
        };
    }
    rpc stopTaskExecution (TaskExecutionIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/task_execution/stop"
            body: "*"
        };
    }
    rpc getTaskExecution (IdRequest) returns (Response) {
        option (google.api.http) = {
            get: "/task_execution/get/{id}"
        };
    }
    rpc listTaskExecutions (ListTaskExecutionsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/task_execution/list"
            body: "*"
        };
    }
    // end task execution api

    // begin workflow schedule api
    rpc addWorkflowSchedule (WorkflowScheduleProto) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_schedule/add"
            body: "*"
        };
    }
    rpc getWorkflowSchedule (IdRequest) returns (Response) {
        option (google.api.http) = {
            get: "/workflow_schedule/get/{id}"
        };
    }
    rpc listWorkflowSchedules (ListWorkflowItemsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_schedule/list"
            body: "*"
        };
    }
    rpc deleteWorkflowSchedule (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_schedule/delete"
            body: "*"
        };
    }
    rpc deleteWorkflowSchedules (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_schedule/delete_all"
            body: "*"
        };
    }
    rpc pauseWorkflowSchedule (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_schedule/pause"
            body: "*"
        };
    }
    rpc resumeWorkflowSchedule (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_schedule/resume"
            body: "*"
        };
    }

    // begin workflow trigger api
    rpc addWorkflowTrigger (WorkflowTriggerProto) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_trigger/add"
            body: "*"
        };
    }
    rpc getWorkflowTrigger (IdRequest) returns (Response) {
        option (google.api.http) = {
            get: "/workflow_trigger/get/{id}"
        };
    }
    rpc listWorkflowTriggers (ListWorkflowItemsRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_trigger/list"
            body: "*"
        };
    }
    rpc deleteWorkflowTrigger (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_trigger/delete"
            body: "*"
        };
    }
    rpc deleteWorkflowTriggers (WorkflowIdentifier) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_trigger/delete_all"
            body: "*"
        };
    }
    rpc pauseWorkflowTrigger (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_trigger/pause"
            body: "*"
        };
    }
    rpc resumeWorkflowTrigger (IdRequest) returns (Response) {
        option (google.api.http) = {
            post: "/workflow_trigger/resume"
            body: "*"
        };
    }
    // end workflow trigger api
}