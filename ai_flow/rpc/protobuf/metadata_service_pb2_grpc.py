#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import message_pb2 as message__pb2
from . import metadata_service_pb2 as metadata__service__pb2


class MetadataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addNamespace = channel.unary_unary(
                '/ai_flow.MetadataService/addNamespace',
                request_serializer=message__pb2.NamespaceProto.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getNamespace = channel.unary_unary(
                '/ai_flow.MetadataService/getNamespace',
                request_serializer=message__pb2.NameRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.updateNamespace = channel.unary_unary(
                '/ai_flow.MetadataService/updateNamespace',
                request_serializer=message__pb2.NamespaceProto.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listNamespaces = channel.unary_unary(
                '/ai_flow.MetadataService/listNamespaces',
                request_serializer=message__pb2.ListRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteNamespace = channel.unary_unary(
                '/ai_flow.MetadataService/deleteNamespace',
                request_serializer=message__pb2.NameRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.addWorkflowSnapshot = channel.unary_unary(
                '/ai_flow.MetadataService/addWorkflowSnapshot',
                request_serializer=message__pb2.WorkflowSnapshotProto.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.getWorkflowSnapshot = channel.unary_unary(
                '/ai_flow.MetadataService/getWorkflowSnapshot',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.listWorkflowSnapshots = channel.unary_unary(
                '/ai_flow.MetadataService/listWorkflowSnapshots',
                request_serializer=metadata__service__pb2.ListWorkflowSnapshotsRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )
        self.deleteWorkflowSnapshot = channel.unary_unary(
                '/ai_flow.MetadataService/deleteWorkflowSnapshot',
                request_serializer=message__pb2.IdRequest.SerializeToString,
                response_deserializer=message__pb2.Response.FromString,
                )


class MetadataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addNamespace(self, request, context):
        """begin namespace api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listNamespaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addWorkflowSnapshot(self, request, context):
        """begin workflow snapshot api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getWorkflowSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listWorkflowSnapshots(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteWorkflowSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.addNamespace,
                    request_deserializer=message__pb2.NamespaceProto.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.getNamespace,
                    request_deserializer=message__pb2.NameRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'updateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.updateNamespace,
                    request_deserializer=message__pb2.NamespaceProto.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listNamespaces': grpc.unary_unary_rpc_method_handler(
                    servicer.listNamespaces,
                    request_deserializer=message__pb2.ListRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteNamespace,
                    request_deserializer=message__pb2.NameRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'addWorkflowSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.addWorkflowSnapshot,
                    request_deserializer=message__pb2.WorkflowSnapshotProto.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'getWorkflowSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.getWorkflowSnapshot,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'listWorkflowSnapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.listWorkflowSnapshots,
                    request_deserializer=metadata__service__pb2.ListWorkflowSnapshotsRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
            'deleteWorkflowSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteWorkflowSnapshot,
                    request_deserializer=message__pb2.IdRequest.FromString,
                    response_serializer=message__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ai_flow.MetadataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetadataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/addNamespace',
            message__pb2.NamespaceProto.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/getNamespace',
            message__pb2.NameRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/updateNamespace',
            message__pb2.NamespaceProto.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listNamespaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/listNamespaces',
            message__pb2.ListRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/deleteNamespace',
            message__pb2.NameRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addWorkflowSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/addWorkflowSnapshot',
            message__pb2.WorkflowSnapshotProto.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getWorkflowSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/getWorkflowSnapshot',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listWorkflowSnapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/listWorkflowSnapshots',
            metadata__service__pb2.ListWorkflowSnapshotsRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteWorkflowSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ai_flow.MetadataService/deleteWorkflowSnapshot',
            message__pb2.IdRequest.SerializeToString,
            message__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
